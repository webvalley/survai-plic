# Generated by Django 2.1.4 on 2019-05-16 15:04

import ai_collection.models
from django.db import migrations, models
import django.db.models.deletion
import django_resumable.fields
import markdownx.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the Affiliation Institution', max_length=300, unique=True, verbose_name='Institution Name')),
                ('country', models.CharField(blank=True, help_text='(Optional) Country of Affiliation', max_length=200, null=True, verbose_name='Institution Country')),
                ('city', models.CharField(blank=True, help_text='(Optional) City of Affiliation', max_length=200, null=True, verbose_name='Institution City')),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Author Full Name')),
                ('indexed_name', models.CharField(blank=True, max_length=200, verbose_name='Scopus Indexed Name')),
            ],
        ),
        migrations.CreateModel(
            name='AuthorPaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_order', models.PositiveSmallIntegerField(verbose_name='Author Order')),
                ('affiliations', models.ManyToManyField(blank=True, related_name='authors', to='ai_collection.Affiliation')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paper_info', to='ai_collection.Author', verbose_name='Author')),
            ],
            options={
                'get_latest_by': 'author_order',
            },
        ),
        migrations.CreateModel(
            name='DataArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archive_type', models.CharField(choices=[('BIN', 'Binary (e.g. MatLab Files)'), ('IMG', 'RGB Images (e.g. JPEG, PNG)'), ('MED', 'Medical Images (e.g. NIFTI, DICOM)'), ('TXT', 'Textual (e.g. Excel, CSV)'), ('MIS', 'Miscellanea (see Notes)'), ('OTH', 'Other & Misc')], max_length=3)),
                ('archive_format', models.CharField(blank=True, default='', help_text='(Optional) Format/Extension of the data files', max_length=200, verbose_name='Format')),
                ('name', models.CharField(blank=True, default='', help_text='(Optional) Label to associate to the data package', max_length=80, verbose_name='Label')),
                ('archive_file', django_resumable.fields.ResumableFileField(max_length=500, upload_to=ai_collection.models.archive_upload_path, verbose_name='Resource File')),
                ('notes', markdownx.models.MarkdownxField(blank=True, help_text='(Optional) Additional Notes', verbose_name='Notes')),
                ('upload_date', models.DateField(auto_now_add=True)),
                ('last_change', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
                'get_latest_by': ['-upload_change'],
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='Full Name of the Resource', max_length=250, verbose_name='Dataset Name')),
                ('short_name', models.CharField(help_text='Short Mnemonic Name (UNIQUE)', max_length=40, unique=True, verbose_name='Short Name')),
                ('description', markdownx.models.MarkdownxField(help_text='(Full) Description of the Resource', verbose_name='Description')),
                ('short_description', markdownx.models.MarkdownxField(blank=True, help_text='(Optional) Short Description of the Resource', null=True, verbose_name='Short Description')),
                ('n_patients', models.PositiveIntegerField(default=0, verbose_name='Number of Patients in the Study')),
                ('patients_in_study', models.CharField(blank=True, choices=[('', '--------------'), ('ALL', 'Healthy Patients & Patients w/ Pathology'), ('PAT', 'Patients w/ Pathology only')], default='', max_length=3)),
                ('release_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Release Year')),
                ('web_url', models.URLField(verbose_name='Source URL')),
                ('upload_date', models.DateField(auto_now_add=True)),
                ('last_change', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Dataset',
                'verbose_name_plural': 'Datasets',
                'get_latest_by': ['-upload_change'],
            },
        ),
        migrations.CreateModel(
            name='ExperimentalStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='(Optional) Short name to identify the study', max_length=100, null=True, verbose_name='Label')),
                ('notes', markdownx.models.MarkdownxField(blank=True, help_text='(Optional) Short description or notes about the experimental study', max_length=1000, null=True, verbose_name='Notes')),
                ('upload_date', models.DateField(auto_now_add=True)),
                ('last_change', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experimental_study', to='ai_collection.Dataset')),
            ],
            options={
                'verbose_name': 'Experimental Study',
                'verbose_name_plural': 'Experimental Studies',
                'get_latest_by': ['-upload_change'],
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('badge_class', models.CharField(choices=[('badge-primary', '<span class="badge badge-pill badge-primary">Resource Tag</span>'), ('badge-secondary', '<span class="badge badge-pill badge-secondary">Resource Tag</span>'), ('badge-success', '<span class="badge badge-pill badge-success">Resource Tag</span>'), ('badge-danger', '<span class="badge badge-pill badge-danger">Resource Tag</span>'), ('badge-warning', '<span class="badge badge-pill badge-warning">Resource Tag</span>'), ('badge-info', '<span class="badge badge-pill badge-info">Resource Tag</span>'), ('badge-light', '<span class="badge badge-pill badge-light">Resource Tag</span>'), ('badge-dark', '<span class="badge badge-pill badge-dark">Resource Tag</span>'), ('pink', '<span class="badge badge-pill pink">Resource Tag</span>'), ('indigo', '<span class="badge badge-pill indigo">Resource Tag</span>'), ('purple', '<span class="badge badge-pill purple">Resource Tag</span>'), ('orange', '<span class="badge badge-pill orange">Resource Tag</span>'), ('green', '<span class="badge badge-pill green">Resource Tag</span>'), ('blue-twitter', '<span class="badge badge-pill blue-twitter">Resource Tag</span>')], default='', max_length=20, verbose_name='Badge')),
                ('name', models.CharField(help_text='Note: The name of the Tag will be saved as lowercase to simplify research', max_length=250, unique=True, verbose_name='Keyword')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('badge_class', models.CharField(choices=[('badge-primary', '<span class="badge badge-pill badge-primary">Resource Tag</span>'), ('badge-secondary', '<span class="badge badge-pill badge-secondary">Resource Tag</span>'), ('badge-success', '<span class="badge badge-pill badge-success">Resource Tag</span>'), ('badge-danger', '<span class="badge badge-pill badge-danger">Resource Tag</span>'), ('badge-warning', '<span class="badge badge-pill badge-warning">Resource Tag</span>'), ('badge-info', '<span class="badge badge-pill badge-info">Resource Tag</span>'), ('badge-light', '<span class="badge badge-pill badge-light">Resource Tag</span>'), ('badge-dark', '<span class="badge badge-pill badge-dark">Resource Tag</span>'), ('pink', '<span class="badge badge-pill pink">Resource Tag</span>'), ('indigo', '<span class="badge badge-pill indigo">Resource Tag</span>'), ('purple', '<span class="badge badge-pill purple">Resource Tag</span>'), ('orange', '<span class="badge badge-pill orange">Resource Tag</span>'), ('green', '<span class="badge badge-pill green">Resource Tag</span>'), ('blue-twitter', '<span class="badge badge-pill blue-twitter">Resource Tag</span>')], default='', max_length=20, verbose_name='Badge')),
                ('name', models.CharField(help_text='Note: The name of the Method will be saved as lowercase to simplify research', max_length=200, primary_key=True, serialize=False, unique=True, verbose_name='Method')),
            ],
            options={
                'verbose_name': 'Algorithm',
                'verbose_name_plural': 'Algorithms',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata_reference', models.CharField(choices=[('SCOPUS', 'SCOPUS/PUBMED'), ('ARXIV', 'ARXIV'), ('SEMSCL', 'SEMANTIC SCHOLAR'), ('MANUAL', 'MANUAL')], max_length=6, verbose_name='Metadata Engine')),
                ('reference_id', models.CharField(default=' ', help_text='Unique ID for the Paper (i.e. DOI, Semantic Scholar ID, or ArxivID)', max_length=200, unique=True, verbose_name='ID')),
                ('title', models.CharField(max_length=300, verbose_name='Title')),
                ('abstract', markdownx.models.MarkdownxField(blank=True, verbose_name='Abstract - Summary')),
                ('paper_file', models.FileField(blank=True, null=True, upload_to=ai_collection.models.paper_upload_path, verbose_name='Paper File')),
                ('venue', models.CharField(blank=True, help_text='(Optional) Name of the Venue/Journal where the paper has been released.', max_length=300, null=True, verbose_name='Venue/Journal Name')),
                ('paper_url', models.URLField(blank=True, help_text='(Optional) Reference URL of the Paper', null=True, verbose_name='Paper URL')),
                ('year_of_publication', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Year of Publication')),
                ('doi', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='DOI')),
                ('issn', models.CharField(blank=True, max_length=150, verbose_name='ISSN')),
                ('page_range', models.CharField(blank=True, max_length=200, verbose_name='Page Range')),
                ('article_type', models.CharField(blank=True, max_length=80, verbose_name='Submission Type')),
                ('aggregation_type', models.CharField(blank=True, max_length=80, verbose_name='Article Type')),
                ('volume', models.CharField(blank=True, max_length=50, verbose_name='Volume')),
                ('eid', models.CharField(blank=True, max_length=80, verbose_name='EID')),
                ('pubmed_id', models.CharField(blank=True, max_length=80, verbose_name='PubMed ID')),
                ('publication_date', models.DateField(blank=True, null=True, verbose_name='Publication Date')),
                ('arxiv_id', models.CharField(blank=True, max_length=150, null=True, verbose_name='ArXiv ID')),
                ('ss_id', models.CharField(blank=True, max_length=150, null=True, verbose_name='Semantic Scholar Paper ID')),
                ('ss_url', models.URLField(blank=True, null=True, verbose_name='SemanticScholar URL')),
                ('upload_date', models.DateField(auto_now_add=True)),
                ('last_change', models.DateTimeField(auto_now=True)),
                ('authors', models.ManyToManyField(related_name='papers', through='ai_collection.AuthorPaper', to='ai_collection.Author')),
            ],
            options={
                'verbose_name': 'Paper',
                'verbose_name_plural': 'Papers',
                'get_latest_by': ['-last_change'],
            },
        ),
        migrations.CreateModel(
            name='Pathology',
            fields=[
                ('badge_class', models.CharField(choices=[('badge-primary', '<span class="badge badge-pill badge-primary">Resource Tag</span>'), ('badge-secondary', '<span class="badge badge-pill badge-secondary">Resource Tag</span>'), ('badge-success', '<span class="badge badge-pill badge-success">Resource Tag</span>'), ('badge-danger', '<span class="badge badge-pill badge-danger">Resource Tag</span>'), ('badge-warning', '<span class="badge badge-pill badge-warning">Resource Tag</span>'), ('badge-info', '<span class="badge badge-pill badge-info">Resource Tag</span>'), ('badge-light', '<span class="badge badge-pill badge-light">Resource Tag</span>'), ('badge-dark', '<span class="badge badge-pill badge-dark">Resource Tag</span>'), ('pink', '<span class="badge badge-pill pink">Resource Tag</span>'), ('indigo', '<span class="badge badge-pill indigo">Resource Tag</span>'), ('purple', '<span class="badge badge-pill purple">Resource Tag</span>'), ('orange', '<span class="badge badge-pill orange">Resource Tag</span>'), ('green', '<span class="badge badge-pill green">Resource Tag</span>'), ('blue-twitter', '<span class="badge badge-pill blue-twitter">Resource Tag</span>')], default='', max_length=20, verbose_name='Badge')),
                ('name', models.CharField(help_text='Note: The name of the Pathology will be saved as lowercase to simplify research', max_length=200, primary_key=True, serialize=False, unique=True, verbose_name='Pathology')),
            ],
            options={
                'verbose_name': 'Pathology',
                'verbose_name_plural': 'Pathologies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PathologyCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('badge_class', models.CharField(choices=[('badge-primary', '<span class="badge badge-pill badge-primary">Resource Tag</span>'), ('badge-secondary', '<span class="badge badge-pill badge-secondary">Resource Tag</span>'), ('badge-success', '<span class="badge badge-pill badge-success">Resource Tag</span>'), ('badge-danger', '<span class="badge badge-pill badge-danger">Resource Tag</span>'), ('badge-warning', '<span class="badge badge-pill badge-warning">Resource Tag</span>'), ('badge-info', '<span class="badge badge-pill badge-info">Resource Tag</span>'), ('badge-light', '<span class="badge badge-pill badge-light">Resource Tag</span>'), ('badge-dark', '<span class="badge badge-pill badge-dark">Resource Tag</span>'), ('pink', '<span class="badge badge-pill pink">Resource Tag</span>'), ('indigo', '<span class="badge badge-pill indigo">Resource Tag</span>'), ('purple', '<span class="badge badge-pill purple">Resource Tag</span>'), ('orange', '<span class="badge badge-pill orange">Resource Tag</span>'), ('green', '<span class="badge badge-pill green">Resource Tag</span>'), ('blue-twitter', '<span class="badge badge-pill blue-twitter">Resource Tag</span>')], default='', max_length=20, verbose_name='Badge')),
                ('name', models.CharField(help_text='Note: The name of the Pathology Category will be saved as lowercase to simplify research', max_length=250, unique=True, verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Pathology Category',
                'verbose_name_plural': 'Pathology Categories',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='pathology',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pathologies', to='ai_collection.PathologyCategory'),
        ),
        migrations.AddField(
            model_name='paper',
            name='pathology',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='papers', to='ai_collection.Pathology', verbose_name='Pathology'),
        ),
        migrations.AddField(
            model_name='paper',
            name='terms',
            field=models.ManyToManyField(related_name='papers', to='ai_collection.Keyword', verbose_name='Keywords'),
        ),
        migrations.AddField(
            model_name='experimentalstudy',
            name='method',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='studies', to='ai_collection.Method', verbose_name='Algorithm or Method'),
        ),
        migrations.AddField(
            model_name='experimentalstudy',
            name='paper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experimental_study', to='ai_collection.Paper'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='paper_references',
            field=models.ManyToManyField(help_text='(Optional) Papers using, mentioning,                                                         or referencing this dataset in their                                                         study or experiments.', related_name='experimental_data', through='ai_collection.ExperimentalStudy', to='ai_collection.Paper', verbose_name='Experimental Studies'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='pathology',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='datasets', to='ai_collection.Pathology', verbose_name='Pathology'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='reference_paper',
            field=models.ForeignKey(blank=True, help_text='(Optional) Reference Paper:                                            The paper published along with the dataset', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dataset', to='ai_collection.Paper', verbose_name='Reference Paper'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='tags',
            field=models.ManyToManyField(related_name='datasets', to='ai_collection.Keyword'),
        ),
        migrations.AddField(
            model_name='dataarchive',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_archives', to='ai_collection.Dataset'),
        ),
        migrations.AddField(
            model_name='authorpaper',
            name='paper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors_info', to='ai_collection.Paper', verbose_name='Paper'),
        ),
    ]
